[{"/home/alex/codestaff/assignment_card_game/src/index.tsx":"1","/home/alex/codestaff/assignment_card_game/src/App.tsx":"2","/home/alex/codestaff/assignment_card_game/src/styles/GlobalStyles.tsx":"3","/home/alex/codestaff/assignment_card_game/src/routes/Routes.tsx":"4","/home/alex/codestaff/assignment_card_game/src/pages/home/HomePage.tsx":"5","/home/alex/codestaff/assignment_card_game/src/lib/react-query.ts":"6","/home/alex/codestaff/assignment_card_game/src/stores/game.ts":"7","/home/alex/codestaff/assignment_card_game/src/api/cards.ts":"8","/home/alex/codestaff/assignment_card_game/src/components/Header/Header.tsx":"9"},{"size":209,"mtime":1631694754600,"results":"10","hashOfConfig":"11"},{"size":530,"mtime":1631706637250,"results":"12","hashOfConfig":"11"},{"size":616,"mtime":1631707555600,"results":"13","hashOfConfig":"11"},{"size":405,"mtime":1631706775510,"results":"14","hashOfConfig":"11"},{"size":1949,"mtime":1631706054150,"results":"15","hashOfConfig":"11"},{"size":314,"mtime":1631706606480,"results":"16","hashOfConfig":"11"},{"size":1202,"mtime":1631706172390,"results":"17","hashOfConfig":"11"},{"size":568,"mtime":1631699364240,"results":"18","hashOfConfig":"11"},{"size":1104,"mtime":1631707664470,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1rhzneq",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alex/codestaff/assignment_card_game/src/index.tsx",[],["40","41","42","43","44"],"/home/alex/codestaff/assignment_card_game/src/App.tsx",[],"/home/alex/codestaff/assignment_card_game/src/styles/GlobalStyles.tsx",[],"/home/alex/codestaff/assignment_card_game/src/routes/Routes.tsx",[],"/home/alex/codestaff/assignment_card_game/src/pages/home/HomePage.tsx",["45"],"import getRandomCard, { Card } from 'api/cards';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport useGameStore from 'stores/game';\n\nconst NAMED_VALUES = {\n    KING: 13,\n    QUEEN: 12,\n    JACK: 11,\n    ACE: 1,\n};\n\ntype NamedValues = 'KING' | 'QUEEN' | 'JACK' | 'ACE';\n\nconst normalizeCardValue = (value: string): number => {\n    if (value in NAMED_VALUES) {\n        return Number(NAMED_VALUES[value as NamedValues]);\n    }\n\n    return Number(value);\n};\n\nconst HomePage: React.FC = () => {\n    const {\n        playerScore,\n        computerScore,\n        setPlayerScore,\n        setComputerScore,\n        gameStatus,\n        compareScores,\n    } = useGameStore((state) => state);\n    const { data, isError, isLoading } = useQuery('cards', () => getRandomCard());\n    console.log(playerScore, computerScore, gameStatus);\n\n    return (\n        <>\n            <h1>{playerScore}</h1>\n            <h1>{computerScore}</h1>\n            <h1>{gameStatus}</h1>\n            {isError && <p>errror</p>}\n            {isLoading && <p>loading</p>}\n            {data &&\n                data.cards?.map((card: Card) => (\n                    <button\n                        disabled={gameStatus !== 'initial'}\n                        type=\"button\"\n                        key={card.code}\n                        onClick={() => {\n                            setPlayerScore(normalizeCardValue(card.value));\n                            setComputerScore(\n                                normalizeCardValue(\n                                    data.cards?.find((item) => item.code !== card.code)?.value ??\n                                        '',\n                                ),\n                            );\n                            compareScores();\n                        }}\n                    >\n                        {card.value}\n                    </button>\n                ))}\n        </>\n    );\n};\n\nexport default HomePage;\n","/home/alex/codestaff/assignment_card_game/src/lib/react-query.ts",[],"/home/alex/codestaff/assignment_card_game/src/stores/game.ts",[],"/home/alex/codestaff/assignment_card_game/src/api/cards.ts",[],"/home/alex/codestaff/assignment_card_game/src/components/Header/Header.tsx",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":33,"column":5,"nodeType":"58","messageId":"59","endLine":33,"endColumn":16},"lines-around-directive",["60"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]